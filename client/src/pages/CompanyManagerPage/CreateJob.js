import {
  Box,
  Button,
  Container,
  makeStyles,
  Paper,
  Typography,
} from '@material-ui/core';
import React, { useEffect } from 'react';
import { useForm, useFieldArray } from 'react-hook-form';
import MuiDatePicker from '../../components/UI/Mui/MuiDatePicker';
import MuiSelect from '../../components/UI/Mui/MuiSelect';
import MuiTextField from '../../components/UI/Mui/MuiTextField';

const defaultValues = {
  title: 'Python',
  company: '60b7fbeee3cc070914e6a733',
  tags: ['Python', 'C++', 'Node JS', 'Qu·∫£n l√Ω d·ª± √°n'],
  position: 'Dev',
  location: 'H√† N·ªôi',
  requirements: [
    'C√≥ t·ªëi thi·ªÉu 1 nƒÉm kinh nghi·ªám l√†m v·ªÅ framework NodeJS trong ph√°t tri·ªÉn ph·∫ßn m·ªÅm',
    'N·∫Øm v·ªØng ki·∫øn th·ª©c l·∫≠p tr√¨nh c∆° b·∫£n, l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (OOP), c∆° s·ªü d·ªØ li·ªáu (DBMS)',
    'Ti·∫øng Anh ƒë·ªçc hi·ªÉu t√†i li·ªáu k·ªπ thu·∫≠t.',
  ],
  descriptions: [
    'Tham gia ph√°t tri·ªÉn c√°c d·ª± √°n ph√°t tri·ªÉn ph·∫ßn m·ªÅm outsourcing cho Nh·∫≠t s·ª≠ d·ª•ng framework NodeJS c·ªßa Javascript',
    'ƒê·ªÅ xu·∫•t gi·∫£i ph√°p, xu h∆∞·ªõng c√¥ng ngh·ªá m·ªõi ƒë·ªÉ n√¢ng cao ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m cho kh√°ch h√†ng',
    'Ph·ªëi h·ª£p hi·ªáu qu·∫£ c√πng nh√≥m thi·∫øt k·∫ø, l·∫≠p tr√¨nh ƒë·ªÉ cho ra s·∫£n ph·∫©m t·ªët nh·∫•t',
  ],
  salary: '1000-2000',
  type: 'Fulltime',
  from: '',
  to: '',
};
const useStyles = makeStyles((theme) => ({
  root: {
    padding: theme.spacing(4),
    marginTop: theme.spacing(2),
  },
}));

const CreateJob = () => {
  const { handleSubmit, getValues, control, reset, register } = useForm({
    defaultValues,
  });

  const {
    fields: tagFields,
    append: tagAppend,
    remove: tagRemove,
  } = useFieldArray({
    control,
    name: 'tags',
  });

  const {
    fields: requirementFields,
    append: requirementAppend,
    remove: requirementRemove,
  } = useFieldArray({
    control,
    name: 'requirements',
  });

  const {
    fields: descriptionFields,
    append: descriptionAppend,
    remove: descriptionRemove,
  } = useFieldArray({
    control,
    name: 'descriptions',
  });

  useEffect(() => {
    reset(defaultValues);
  }, [reset]);

  const classes = useStyles();
  return (
    <Container maxWidth="sm">
      <Paper className={classes.root}>
        <Box
          display="flex"
          alignItems="center"
          justifyContent="center"
          marginBottom={2}
        >
          <Typography variant="h6">ü¶π‚Äç‚ôÇÔ∏è T·∫°o vi·ªác l√†m üíå</Typography>
        </Box>
        <form
          onSubmit={handleSubmit((data) => {
            console.log(data);
          })}
          className="form"
        >
          <MuiTextField
            control={control}
            getValues={getValues}
            nameField="title"
            label="T√™n c√¥ng vi·ªác"
          />
          <MuiTextField
            control={control}
            getValues={getValues}
            nameField="position"
            label="V·ªã tr√≠"
            register={register}
          />
          <MuiTextField
            control={control}
            getValues={getValues}
            nameField="salary"
            label="M·ª©c l∆∞∆°ng"
          />

          <Typography variant="subtitle2">Th·ªùi h·∫°n</Typography>
          <MuiDatePicker
            control={control}
            getValues={getValues}
            register={register}
            nameField="to"
          />

          <MuiSelect
            control={control}
            nameField="location"
            label="Th√†nh ph·ªë"
            menus={[
              { text: 'H√† N·ªôi', value: 'H√† N·ªôi' },
              { text: 'H·ªì Ch√≠ Minh', value: 'H·ªì Ch√≠ Minh' },
              { text: 'ƒê√† N·∫µng', value: 'ƒê√† N·∫µng' },
              { text: 'others', value: 'Other' },
            ]}
          />
          <MuiSelect
            control={control}
            nameField="type"
            label="Lo·∫°i c√¥ng vi·ªác"
            menus={[
              { text: 'Fulltime', value: 'Fulltime' },
              { text: 'Partime', value: 'Partime' },
              { text: 'Remote', value: 'Remote' },
            ]}
          />

          <Typography variant="h4">C√¥ng ngh·ªá</Typography>
          <Button
            variant="contained"
            color="primary"
            size="small"
            onClick={() => tagAppend({ name: ' ' })}
          >
            Th√™m
          </Button>
          {/* {tagFields.map((tag, index) => (
            <Controller
              control={control}
              key={tag.id}
              name={`tags[${index}]`}
              render={({ ...props }) => (
                <>
                  <TextField {...props} multiline={true} />
                  <Button
                    variant="contained"
                    color="primary"
                    size="small"
                    onClick={() => tagRemove(index)}
                  >
                    Remove
                  </Button>
                </>
              )}
            />
          ))} */}
          {tagFields.map((tag, index) => (
            <Box
              key={tag.id}
              display="flex"
              alignItems="center"
              paddingLeft={4}
            >
              <MuiTextField
                fullWidth={false}
                control={control}
                getValues={getValues}
                register={register}
                nameField={`tags[${index}]`}
              />

              <Button
                variant="contained"
                color="primary"
                size="small"
                onClick={() => tagRemove(index)}
                style={{ maxHeight: 32 }}
              >
                X√≥a
              </Button>
            </Box>
          ))}
          <Typography variant="h4">Y√™u c·∫ßu</Typography>
          <Button
            variant="contained"
            color="primary"
            size="small"
            onClick={() => requirementAppend({ name: ' ' })}
          >
            Th√™m
          </Button>
          {requirementFields.map((tag, index) => (
            <Box
              key={tag.id}
              display="flex"
              alignItems="center"
              paddingLeft={4}
            >
              <MuiTextField
                fullWidth={false}
                control={control}
                getValues={getValues}
                register={register}
                nameField={`requirements[${index}]`}
              />
              <Button
                variant="contained"
                color="primary"
                size="small"
                style={{ maxHeight: 32 }}
                onClick={() => requirementRemove(index)}
              >
                X√≥a
              </Button>
            </Box>
          ))}

          <Typography variant="h4">M√¥ t·∫£</Typography>
          <Button
            variant="contained"
            color="primary"
            size="small"
            onClick={() => descriptionAppend({ name: ' ' })}
          >
            Th√™m
          </Button>
          {descriptionFields.map((tag, index) => (
            <Box
              key={tag.id}
              display="flex"
              alignItems="center"
              paddingLeft={4}
            >
              <MuiTextField
                fullWidth={false}
                control={control}
                getValues={getValues}
                register={register}
                nameField={`descriptions[${index}]`}
              />
              <Button
                variant="contained"
                color="primary"
                size="small"
                style={{ maxHeight: 32 }}
                onClick={() => descriptionRemove(index)}
              >
                X√≥a
              </Button>
            </Box>
          ))}

          <Button
            variant="contained"
            color="secondary"
            type="submit"
            size="large"
            fullWidth
            style={{
              marginTop: 8,
            }}
          >
            T·∫°o c√¥ng vi·ªác
          </Button>
        </form>
      </Paper>
    </Container>
  );
};

export default CreateJob;
